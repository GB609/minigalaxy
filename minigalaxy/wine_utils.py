"""Some helpers to handle selection, configuration and start of wine commands"""
import shutil
import textwrap

from minigalaxy.config import Config
from minigalaxy.constants import WINE_VARIANTS
from minigalaxy.game import Game


GAMEINFO_UMUID = "umu_id"
GAMEINFO_CUSTOM_WINE = "custom_wine"


def is_wine_installed() -> bool:
    for wine in WINE_VARIANTS:
        if shutil.which(wine[0]):
            return True
    return False


def get_wine_path(game: Game, config: Config = Config()) -> str:
    custom_wine_path = game.get_info(GAMEINFO_CUSTOM_WINE)
    if custom_wine_path and shutil.which(custom_wine_path):
        return custom_wine_path

    newDefault = get_default_wine(config)
    game.set_info(GAMEINFO_CUSTOM_WINE, newDefault)
    return newDefault


def get_wine_env(game: Game, config: Config = Config()) -> []:
    environment = ['WINEDLLOVERRIDES="winemenubuilder.exe=d"']
    environment.append(f'WINEPREFIX="{game.install_dir}/prefix"')

    if 'umu-run' in get_wine_path(game, config):
        environment.append(f'GAMEID="get_umu_id"')
        if shutil.which('zenity'):
            environment.append('UMU_ZENITY=1')

    for var in game.get_info("variable").split():
        kvp = var.split('=', 1)
        environment.append(f'{[kvp[0]]}="{kvp[1]}"')

    return environment


def get_default_wine(config: Config = Config()) -> str:
    runner = shutil.which(config.default_wine_runner)
    if runner:
        return runner

    # fallback: iterate through all known variants in declaration order
    for option in WINE_VARIANTS:
        runner = shutil.which(option[0])
        if runner:
            return runner

    # should never happen when get_default_wine is used after is_wine_installed returns true
    return ""


def get_create_wine_launch_script(game: Game, exe_cmd: [], force_overwrite = False, config: Config = Config()) -> str:
    script_path = f"{game.install_dir}/start.sh"
    if not os.path.isfile(script_path) or force_overwrite:

        exe_raw = [*exe_cmd]
        # TODO: can't handle blanks in command
        # might be problematic if additional paths containing blanks are given
        exe_raw.append(game.get_info("command").split())

        exe_cmd_masked = []
        for argument in exe_raw:
            if ' ' in argument:
                exe_cmd_masked.append(f'"{argument}"')
            else:
                exe_cmd_masked.append(argument)

        custom_env = []
        for entry in get_wine_env(game, config):
          key, value = entry.split('=', 1)
          '''produces 'export key=${key:-value}
          benefit: defined vars can temporarily be overridden when calling the script from console'''
          custom_env.append(f'export {key}="${{{key}:-{value}}}"')

        '''using a script instead of a command allows for more and better control over
        env from desktop shortcuts and minigalaxy itself.
        Desktop shortcuts will only contain a short call to ./start and won't need to
        be rewritten when the game is customized.
        Also allows manual customisation up to a certain degree (until overwritten by property changes)
        and direct invocation from console.
        Doubles down as easily accessible additional context information when creating issues.'''
        launchScript = '''\
            #!/bin/sh

            # automatically generated by minigalaxy/wine_utils.py
            # will be regenerated when the game configuration is changed 

            cd $(dirname $(readlink -f "$0"))/prefix/dosdevices/"c:"

            #--- default envs from launcher.py, followed by those set in game properties
            # this makes it possible to override defaults
            {env}
            #---

            WORKDIR="${{WORKDIR:-}}"

            wine_binary="{wine_bin}"
            starter="start /b /wait /d \"$WORKDIR\""

            # parameters set in game options will be appended here
            executable=({exe_cmd})

            if [ -z "$1" ] || [ "$1" = "--" ]; then
                [ "$1" = "--" ] && shift
                "$wine_binary" $starter "${{executable[@]}}" "$@"
            else
                # this allows to call arbitrary commands within the wineprefix
                # with identical environment
                "$wine_binary" $starter "$@"
            fi'''.format(
                wine_bin=get_wine_path(game, config), 
                exe_cmd=' '.join(exe_cmd_masked),
                env='\n'.join(custom_env))

        with open(script_path, "w") as file:
            file.write(textwrap.dedent(launchScript))

    return script_path
